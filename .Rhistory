xlab('Concentration (uM)')
scale_color_discrete("Compound")
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') +
scale_color_discrete("Compound")
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') + geom_hline(mapping = NULL, data= NULL, stat = "hline", position = "75") +
scale_color_discrete("Compound")
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') + geom_hline( position = "75") +
scale_color_discrete("Compound")
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') + geom_hline(aes(yintercept) = 75) +
scale_color_discrete("Compound")
colnames(characteristics)[max.col(characteristics, ties.method = "first")]
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') + facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') +
facet_wrap(~ Compound)
library(data.table)
data <- data.table(normviability)
melted_data <- melt(data, id.vars=c('Concentration', 'DMSO'),
measure.vars = paste0('Compound.', c(1:11)),
na.rm = TRUE)
melted_data[, Compound := gsub(pattern = "Compound.",
replacement="",
variable)]
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)')
scale_color_discrete("Compound")
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') +
facet_wrap(~ Compound)
predict(fit, melted_data(value = 50))
predict(fit, normviability(value = 50))
predict(fitted(normviability), value = 50)
identify(x, y = 50)
install.packages("identify")
approx(x = normviability$Compound.1, y = 50)
approx(x = normviability$Compound*, y = normviability, xout = 50)
View(characteristics)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') + theme(panel.grid.minor = element_blank()) + facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') + theme(panel.grid.major = element_blank()) + facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') + theme(panel.grid.major = element_blank()), panel.grid.minor = element_blank() + facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') + ggtitle("Viability Curves") + facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') + ggtitle("Viability Curves") + theme(plot.title = element_text(lineheight = .8, face = "bold")) + facet_wrap(~ Compound)
# Calculate average of DMSO control wells
DMSO_Average <- with(viability, sum(DMSO) / 8)
# Create new data table (% viability normalized to DMSO control wells)
normviability <- viability[2:13] / DMSO_Average * 100
knitr::opts_chunk$set(echo = TRUE)
if(!require(tidyverse)){
install.packages('tidyverse')
require(tidyverse)
}
# Import sample viability data (96-well plate)
viability <- read.csv ("~/Desktop/R Final Project/R Test Viability 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Calculate average of DMSO control wells
DMSO_Average <- with(viability, sum(DMSO) / 8)
# Create new data table (% viability normalized to DMSO control wells)
normviability <- viability[2:13] / DMSO_Average * 100
round(normviability, digits = 2)
# Copy "Concentration" column from viability data table and append to norm_viability data table
normviability$Concentration <- viability[, "Concentration..uM."]
# Remove "Concentration"" column from viability data table
viability[, "Concentration..uM."] <- NULL
library(data.table)
data <- data.table(normviability)
# Establish library/data parameters for graphs
library(data.table)
data <- data.table(normviability)
melted_data <- melt(data, id.vars=c('Concentration', 'DMSO'),
measure.vars = paste0('Compound.', c(1:11)),
na.rm = TRUE)
melted_data[, Compound := gsub(pattern = "Compound.",
replacement="",
variable)]
# I want to have the Compounds in numerical order. Do I need to change my csv file? (1-11 vs. 1, 10, 11, 2...)
# Make graph with all Compounds (%Viability) vs. Concentration
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') +
ggtitle("Viability Curves") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
scale_color_discrete("Compound")
#Make graph with each individual Compound (% Viability) vs. Concentration
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') +
# I tried to put in xlab'(Concentration (uM)') as before but it condensed my graphs.
facet_wrap(~ Compound)
# Open new csv file with differentiation data
differentiation <- read.csv ("~/Desktop/R Final Project/R Test Differentiation 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Calculate average background (undifferentiated cells) by taking average of DMSO-treated wells
DMSO_Average_Diff <- with(differentiation, sum(DMSO) /8)
# Create new data table (differentiation_minusback) by subtracting average background from each well (excluding 'Concentration' wells)
differentiation_minusback <- differentiation[2:12] - DMSO_Average_Diff
# Create new data table (differentiation_normalized) by dividing differentiation_minusback by average of 'PosCon' wells and adjusting for percentage by multiplying by 100
differentiation_poscon_average <- with(differentiation_minusback, sum(PosCon) /8)
differentiation_normalized <- differentiation_minusback / differentiation_poscon_average * 100
# Copy "Concentration" column from differentiation data table and append to differentiation_normalized data table
differentiation_normalized$Concentration <- differentiation[, "Concentration..uM."]
round(differentiation_normalized, digits = 2)
# Remove "Concentration"" column from differentiation data table
differentiation[, "Concentration..uM."] <- NULL
library(data.table)
datadiff <- data.table(differentiation_normalized)
# Establish library/data parameters for graphs
library(data.table)
datadiff <- data.table(differentiation_normalized)
melted_data <- melt(datadiff, id.vars = c('Concentration', 'PosCon'),
measure.vars = paste0('Compound.', c(1:10)),
na.rm = TRUE)
melted_data[, Compound := gsub(pattern = "Compound.",
replacement="",
variable)]
# Make graph with all Compounds (%Differentiation) vs. Concentration
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Differentiation') +
xlab ('Concentration (uM)') +
ggtitle("Induction of Differentiation") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
scale_color_discrete("Compound")
#Make graph with each individual Compound (% Differentiation) vs. Concentration
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') +
# I tried to put in xlab'(Concentration (uM)') as before but it condensed my graphs.
# I want to add a horizontal line at 75%
facet_wrap(~ Compound)
#How do I hide code from knitR
# Open new csv file with cell-surface marker data
characteristics <- read.csv ("~/Desktop/R Final Project/R Test Characteristics 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Sort table by most-represented cell population
library(data.table)
datachar <- data.table(characteristics)
knitr::opts_chunk$set(echo = TRUE)
if(!require(tidyverse)){
install.packages('tidyverse')
require(tidyverse)
}
# Import sample viability data (96-well plate)
viability <- read.csv ("~/Desktop/R Final Project/R Test Viability 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Calculate average of DMSO control wells
DMSO_Average <- with(viability, sum(DMSO) / 8)
# Create new data table (% viability normalized to DMSO control wells)
normviability <- viability[2:13] / DMSO_Average * 100
round(normviability, digits = 2)
# Copy "Concentration" column from viability data table and append to norm_viability data table
normviability$Concentration <- viability[, "Concentration..uM."]
# Remove "Concentration"" column from viability data table
viability[, "Concentration..uM."] <- NULL
library(data.table)
data <- data.table(normviability)
# Establish library/data parameters for graphs
library(data.table)
data <- data.table(normviability)
melted_data <- melt(data, id.vars=c('Concentration', 'DMSO'),
measure.vars = paste0('Compound.', c(1:11)),
na.rm = TRUE)
melted_data[, Compound := gsub(pattern = "Compound.",
replacement="",
variable)]
# I want to have the Compounds in numerical order. Do I need to change my csv file? (1-11 vs. 1, 10, 11, 2...)
# Make graph with all Compounds (%Viability) vs. Concentration
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') +
ggtitle("Viability Curves") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
scale_color_discrete("Compound")
#Make graph with each individual Compound (% Viability) vs. Concentration
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Viability') +
# I tried to put in xlab'(Concentration (uM)') as before but it condensed my graphs.
facet_wrap(~ Compound)
# Open new csv file with differentiation data
differentiation <- read.csv ("~/Desktop/R Final Project/R Test Differentiation 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Calculate average background (undifferentiated cells) by taking average of DMSO-treated wells
DMSO_Average_Diff <- with(differentiation, sum(DMSO) /8)
# Create new data table (differentiation_minusback) by subtracting average background from each well (excluding 'Concentration' wells)
differentiation_minusback <- differentiation[2:12] - DMSO_Average_Diff
# Create new data table (differentiation_normalized) by dividing differentiation_minusback by average of 'PosCon' wells and adjusting for percentage by multiplying by 100
differentiation_poscon_average <- with(differentiation_minusback, sum(PosCon) /8)
differentiation_normalized <- differentiation_minusback / differentiation_poscon_average * 100
# Copy "Concentration" column from differentiation data table and append to differentiation_normalized data table
differentiation_normalized$Concentration <- differentiation[, "Concentration..uM."]
round(differentiation_normalized, digits = 2)
# Remove "Concentration"" column from differentiation data table
differentiation[, "Concentration..uM."] <- NULL
library(data.table)
datadiff <- data.table(differentiation_normalized)
# Establish library/data parameters for graphs
library(data.table)
datadiff <- data.table(differentiation_normalized)
melted_data <- melt(datadiff, id.vars = c('Concentration', 'PosCon'),
measure.vars = paste0('Compound.', c(1:10)),
na.rm = TRUE)
melted_data[, Compound := gsub(pattern = "Compound.",
replacement="",
variable)]
# Make graph with all Compounds (%Differentiation) vs. Concentration
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Differentiation') +
xlab ('Concentration (uM)') +
ggtitle("Induction of Differentiation") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
scale_color_discrete("Compound")
#Make graph with each individual Compound (% Differentiation) vs. Concentration
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') +
# I tried to put in xlab'(Concentration (uM)') as before but it condensed my graphs.
# I want to add a horizontal line at 75%
facet_wrap(~ Compound)
#How do I hide code from knitR
# Open new csv file with cell-surface marker data
characteristics <- read.csv ("~/Desktop/R Final Project/R Test Characteristics 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Sort table by most-represented cell population
library(data.table)
datachar <- data.table(characteristics)
colnames(datachar)[apply(datachar, 1, which.max)]
colnames(datachar)[max.col(datachar, ties.method = "first")]
View(datachar)
ggplot(data = datachar, aes(x = Well ID, y = value))
ggplot(data = datachar)
ggplot(data = datachar) + geom_contour()
library("ic50", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:ic50", unload=TRUE)
library("labeling", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:labeling", unload=TRUE)
ggplot(data = datachar, aes(x = CD203c, y = value)) + facet_wrap(~ WellID)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') +
facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') + geom_hline(yintercept = 75 +
facet_wrap(~ Compound)
as
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') + geom_hline(yintercept = 75) +
facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') + geom_hline(yintercept = 50) +
facet_wrap(~ Compound)
ggplot(data = melted_data,
aes(x = Concentration, y = value)) +
geom_line() +
geom_point() +
ylab('% Differentiation') + xlab('Concentration (uM)') + geom_hline(yintercept = 50) +
facet_wrap(~ Compound)
library(ggplot2)
ggplot(data = melted_data,
aes(x = Concentration, y = value, group = Compound, colour = Compound)) +
geom_line() +
geom_point() +
ylab('% Viability') +
xlab('Concentration (uM)') +
ggtitle("Viability Curves") +
theme(plot.title = element_text(lineheight = .8, face = "bold"))
scale_color_discrete("Compound")
melted_data$legendcolumnNew <- melted_data$legend, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10), ordered = TRUE
datachar_col <- as.data.frame(cbind(row.names(datachar), apply(datachar, 1, function(x), names(a) [which(x == max(x))])))
dplyr::mutate(datachar, mainpop = max.col(Well.*))
dplyr::mutate(datachar, mainpop = max.col[1:]
dplyr::mutate(datachar, mainpop = max.col(:)
dplyr::mutate(datachar, mainpop = max.col(Well ID)
dplyr::mutate(datachar, mainpop = max.col[Well ID]
colnames(datachar) [apply(datachar), 1, which.max()]
colnames(datachar)[max.col]
colnames(datachar)[max.col(datachar), ties.method = "first"]
library(matrixstats)
install.packages("matrixStats")
library(matrixStats)
datachar$maxcol <- row(as.matrix(datachar))
View(datachar)
datachar$maxcol <- NULL
View(datachar)
max.col(datachar)
install.packages("Yalmpute")
maxcolcalc <- max.col(datachar, "first")
maxcolcalc <-max.col(datacha, "new")
maxcolcalc <-max.col(datachar, "first", na.omit)
maxcolcalc <-max.col(datachar, "first")
maxcolcalc <- apply
madcolcalc <-apply(a, 1, which.max)
maxcolcalc <- NULL
View(datachar)
datachar2 <- datachar[-c(97,98), ]
View(datachar2)
maxcolcalc <-max.col(datachar2, "first")
mean(datachar2$CD203c)
mean(datachar2$IL.5Ra)
mean(datachar2$F4.80)
mean(datachar2$Ly6C)
mean(datachar2$CD203c[*1])
boxplot(datachar2)
boxplot(datachar2[2:4])
boxplot(datachar2[1:4])
boxplot(datachar2)
datachar2 <- datachar[-c(97,98), ], datachar[,c("CD203c", "IL-5Ra", "Ly6C", "F4/80")]
datachar3 <- datachar[, c ("CD203c", "IL5Ra", "F480", "Ly6C")]
datachar3 <- datachar[, c ("CD203c", "IL-5Ra", "F4/80", "Ly6C")]
datachar3 <- datachar[, c (2:5)]
View(datachar3)
datachar2 <- datachar3[-c(97,98), ]
View(datachar2)
ggplot(boxplot(datachar2))
plot(boxplot(datachar2))
boxplot(datachar2)
boxplot(datachar2) + ylab('MFI')
View(datachar2)
View(datachar)
which.max(datachar(2:5))
which.max(datachar2)
datachar$max <- apply
datachar$max <- apply(datachar, 1, max)
View(datachar)
datachar$max <- apply(datachar, 2:5, max)
datachar$max <- apply(datachar, 2:, max)
datachar$max <- apply(datachar, 2, max)
datachar$max <- NULL
View(datachar)
apply(datachar, 1, which.max)
datachar$MaxCol <- apply(datachar, 1, which.max)
View(datachar)
datachar2$MaxCol <- apply(datachar2, 2, which.max)
View(datachar2)
View(datachar)
as.data.frame(table(datachar[6]))
table(maxcolcalc)
table
table <- NULL
count2 <- length(which(MaxCol == 2))
ggplot(datachar, aes(x = MaxCol, y = len)) + geom_boxplot()
ggplot(datachar, aes(x = MaxCol))
boxplot(datachar$MaxCol)
ggplot(boxplot(datachar))
ggplot2::aes(datachar)
ggplot(datachar, aes(x=MaxCol, y = NULL)) + geom_point()
table(MaxCol(datachar))
table(datachar(maxcol))
table(MaxCol)
table("MaxCol")
table(datachar("MaxCol"))
table(unlist(datachar))
View(table)
table(unlist(datachar("MaxCol")))
table(unlist("MaxCol"))
library(data.table)
as.data.table(datachar) [, count := length(unique(MaxCol)), by = Well ID]
within(datachar, { count = ave(MaxCol, WellID, FUN = function(x) length(unique(x)))})
within(datachar, { count = ave(MaxCol, WellID, FUN = function(x) length(unique(x)))})
length(datachar)
length(datachar(3))
View(datachar)
tally("MaxCol")
tally(datachar)
datachar %>% group_by(MaxCol) %>% tally()
datachar %>% group_by(MaxCol, Well.ID) %>% tally()
boxplot(datachar)
View(datachar2)
datachar2$MaxCol <- NULL
View(datachar2)
boxplot(datachar2)
datachar2 <- datachar[-c(97,98), ]
boxplot(datachar2)
View(datachar2)
boxplot(datachar2)
# Open new csv file with cell-surface marker data
characteristics <- read.csv ("~/Desktop/R Final Project/R Test Characteristics 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Sort table by most-represented cell population
library(data.table)
datachar <- data.table(characteristics)
# Create new column (MaxCol), listing the number of the column with the highest value
datachar$MaxCol <- apply(datachar, 1, which.max)
# Tally the number of wells with majority each cell type
# Boxplot
datachar2 <- datachar[-c(97,98), ]
boxplot(datachar2)
# Open new csv file with cell-surface marker data
characteristics <- read.csv ("~/Desktop/R Final Project/R Test Characteristics 1.csv",
header = TRUE, stringsAsFactors = TRUE)
# Sort table by most-represented cell population
library(data.table)
datachar <- data.table(characteristics)
# Create new column (MaxCol), listing the number of the column with the highest value
# Tally the number of wells with majority each cell type
# Boxplot
datachar2 <- datachar[-c(97,98), ]
boxplot(datachar2)
datachar <- data.table(characteristics)
View(datachar)
datachar2 <- <- datachar[-c(97,98), ]
datachar2 <- datachar[-c(97,98), ]
View(datachar2)
boxplot(datachar(2:5))
datachar3 <- datachar[, c (2:5)]
View(datachar3)
boxplot(datachar3)
characteristics <- read.csv ("~/Desktop/R Final Project/R Test Characteristics 1.csv",
header = TRUE, stringsAsFactors = TRUE)
library(data.table)
datachar <- data.table(characteristics)']
k
xsdf
as_data_frame()
datachar <- data.table(characteristics)
asdlfkjh
awefh
characteristics <- read.csv ("~/Desktop/R Final Project/R Test Characteristics 1.csv",
header = TRUE, stringsAsFactors = TRUE)
library(data.table)
datachar <- data.table(characteristics)
View(datachar)
